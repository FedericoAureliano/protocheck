module main {

    type machine_id = integer;

    // events
    type event_t = enum { PING, PONG, SUCCESS, NONE };

    // states
    type state_e = enum { INIT, SENDPING, WAITPING, WAITPONG, SENDPONG };
    type state_t = record {
        name : state_e,
        entry: boolean
    };

    // machines
    type kind_t    = enum { CLIENT, SERVER };
    type machine_t = record {
        alive: boolean,
        kind : kind_t,
        state: state_t
    };

    // state of the system
    type system_t = record { 
        machines: [machine_id]machine_t,
        m_count : machine_id
    };

    // define shortcuts: "m_" prefix is for machines "e_" prefix is for events
    define m_count   () : machine_id  = system.m_count;
    define m_get    (id : machine_id) : machine_t  = system.machines[id];
    define m_kind   (id : machine_id) : kind_t     = system.machines[id].kind;
    define m_state  (id : machine_id) : state_e    = system.machines[id].state.name;
    define m_entry  (id : machine_id) : boolean    = system.machines[id].state.entry;
    define m_alive  (id : machine_id) : boolean    = id >= 0 && id < system.m_count && system.machines[id].alive;

    //  procedures for machine lists
    procedure reset_machines() 
        modifies system;
    {
        system.m_count = 0;
    }

    procedure add_machine(m: machine_t) 
        modifies system;
    {
        system.machines = system.machines[m_count() -> m];
        system.m_count  = m_count() + 1;
    }

    procedure delete_machine(id: machine_id, s: event_t) 
        modifies system;
    {
        var tmp : machine_t;

        tmp             = m_get(id);
        tmp.alive       = false;
        system.machines = system.machines[id -> tmp];
    }

    // procedures for the model
    procedure init_machines() 
        modifies system;
    {
        var tmp: machine_t;

        call ()    = reset_machines();
        call (tmp) = create_client();
        call ()    = add_machine(tmp);
    }

    procedure create_client() 
        returns (client: machine_t) 
    {
        client.alive       = true;
        client.kind        = CLIENT;
        client.state.name  = INIT;
        client.state.entry = true;
    }

    procedure create_server() 
        returns (server: machine_t) 
    {
        server.alive       = true;
        server.kind        = SERVER;
        server.state.name  = WAITPING;
    }

    procedure [noinline] client_init(id: machine_id, s: event_t)
        modifies system;
        requires m_kind(id)   == CLIENT;
        requires m_state(id)  == INIT;
        requires m_entry(id)  ==> s == NONE;
        requires !m_entry(id) ==> s == SUCCESS;
    {
        if (m_entry(id)) {
            var server : machine_t;
            var tmp    : machine_t;

            tmp             = m_get(id);
            tmp.state.entry = false;
            call (server)   = create_server();
            call ()         = add_machine(server);
            system.machines = system.machines[id -> tmp];

            call () = client_init(id, SUCCESS);
        } else {
            var tmp : machine_t;

            tmp             = m_get(id); 
            tmp.state.entry = true;
            tmp.state.name  = SENDPING;
            system.machines = system.machines[id -> tmp];
            
            call () = client_send_ping(id, NONE);
        }
    }

    procedure [noinline] client_send_ping(id: machine_id, s: event_t) 
        modifies system;
        requires m_kind(id)   == CLIENT;
        requires m_state(id)  == SENDPING;
        requires m_entry(id)  ==> s == NONE;
        requires !m_entry(id) ==> s == SUCCESS;
    {
        if (m_entry(id)) {
            var tmp     : machine_t;
            var dest    : machine_id;
            assume(m_alive(dest) && dest != id);

            tmp             = m_get(id);
            tmp.state.entry = false;
            system.machines = system.machines[id -> tmp];

            call () = client_send_ping(id, SUCCESS);
            call () = server_wait_ping(dest, PING);
        } else {
            var tmp : machine_t;

            tmp             = m_get(id);
            tmp.state.entry = true;
            tmp.state.name  = WAITPONG;
            system.machines = system.machines[id -> tmp];
            
            call () = client_wait_pong(id, NONE);
        }
    }

    procedure [noinline] client_wait_pong(id: machine_id, s: event_t) 
        modifies system;
        requires m_kind(id)  == CLIENT;
        requires m_state(id) == WAITPONG;
        requires s == PONG;
    {
        var tmp : machine_t;

        tmp             = m_get(id); 
        tmp.state.entry = true;
        tmp.state.name  = SENDPING;
        system.machines = system.machines[id -> tmp];
        
        call () = client_send_ping(id, NONE);
    }

    procedure [noinline] server_send_pong(id: machine_id, s: event_t) 
        modifies system;
        requires m_kind(id)   == SERVER;
        requires m_state(id)  == SENDPONG;
        requires m_entry(id)  ==> s == NONE;
        requires !m_entry(id) ==> s == SUCCESS;
    {
        if (m_entry(id)) {
            var tmp     : machine_t;
            var dest    : machine_id;
            assume(m_alive(dest) && dest != id);

            tmp             = m_get(id);
            tmp.state.entry = false;
            system.machines = system.machines[id -> tmp];

            call () = server_send_pong(id, SUCCESS);
            call () = client_wait_pong(dest, PONG);
        } else {
            var tmp : machine_t;

            tmp             = m_get(id);
            tmp.state.entry = true;
            tmp.state.name  = WAITPING;
            system.machines = system.machines[id -> tmp];
            
            call () = server_wait_ping(id, NONE);
        }
    }

    procedure [noinline] server_wait_ping(id: machine_id, s: event_t) 
        modifies system;
        requires m_kind(id)  == SERVER;
        requires m_state(id) == WAITPING;
        requires s == PING;
    {
        var tmp : machine_t;

        tmp             = m_get(id); 
        tmp.state.entry = true;
        tmp.state.name  = SENDPONG;
        system.machines = system.machines[id -> tmp];
        
        call () = server_send_pong(id, NONE);
    }

    var system: system_t;

    control {
        verify(client_init);
        verify(client_send_ping);
        verify(client_wait_pong);
        verify(server_send_pong);
        verify(server_wait_ping);
        check;
        print_results;
    }
}