module main {

    type machine_id = integer;
    type event_id   = integer;

    // events
    type signal_t = enum { PING, PONG, SUCCESS };
    type event_t  = record {
        signal: signal_t,
        source: machine_id,
        target: machine_id
    };

    // states
    type state_e = enum { INIT, SENDPING, WAITPING, WAITPONG, SENDPONG, BAD};
    type state_t = record {
        name : state_e,
        entry: boolean
    };

    // machines
    type kind_t    = enum { CLIENT, SERVER };
    type machine_t = record {
        alive: boolean,
        kind : kind_t,
        state: state_t
    };

    // state of the system
    type system_t = record { 
        machines: [machine_id]machine_t,
        m_count : machine_id,
        events  : [event_id]event_t,
        e_head  : event_id, 
        e_tail  : event_id,
        e_size  : event_id
    };

    // define shortcuts: "m_" prefix is for machines "e_" prefix is for events
    define m_count   () : machine_id  = system.m_count;
    define e_head    () : event_id    = system.e_head;
    define e_tail    () : event_id    = system.e_tail;
    define e_count   () : event_id    = system.e_size;
    define e_signal (id : event_id)   : signal_t   = system.events[id].signal;
    define e_target (id : event_id)   : machine_id = system.events[id].target;
    define e_valid  (id : event_id)   : boolean    = id >= e_head() && id < e_tail();
    define m_get    (id : machine_id) : machine_t  = system.machines[id];
    define m_kind   (id : machine_id) : kind_t     = system.machines[id].kind;
    define m_state  (id : machine_id) : state_e    = system.machines[id].state.name;
    define m_entry  (id : machine_id) : boolean    = system.machines[id].state.entry;
    define m_alive  (id : machine_id) : boolean    = id >= 0 && id < system.m_count && system.machines[id].alive;

    // procedures for event queues
    procedure [inline] reset_events() 
        modifies system;
    {
        system.e_head = 0;
        system.e_tail = 0;
        system.e_size = 0;
    }

    procedure [inline] push_event(e: event_t) 
        modifies system;
    {
        system.events = system.events[e_tail() -> e];
        system.e_tail = e_tail()  + 1;
        system.e_size = e_count() + 1;
    }

    procedure [inline] pop_event() 
        returns (e: event_t)
        modifies system;  
    {
        e = system.events[e_head()];

        system.e_head = e_head()  + 1;
        system.e_size = e_count() - 1;
    }

    //  procedures for machine lists
    procedure [inline] reset_machines() 
        modifies system;
    {
        system.m_count = 0;
    }

    procedure [inline] add_machine(m: machine_t) 
        modifies system;
    {
        system.machines = system.machines[m_count() -> m];
        system.m_count  = m_count() + 1;
    }

    procedure [inline] delete_machine(id: machine_id) 
        modifies system;
    {
        var tmp : machine_t;

        tmp             = m_get(id);
        tmp.alive       = false;
        system.machines = system.machines[id -> tmp];
    }

    // procedures for the model
    procedure [inline] init_machines() 
        modifies system;
    {
        var tmp: machine_t;

        call ()    = reset_machines();
        call ()    = reset_events();
        call (tmp) = create_client();
        call ()    = add_machine(tmp);
    }

    procedure [inline] create_client() 
        returns (client: machine_t) {
        client.alive       = true;
        client.kind        = CLIENT;
        client.state.name  = INIT;
        client.state.entry = true;
    }

    procedure [inline] create_server() 
        returns (server: machine_t) {
        server.alive       = true;
        server.kind        = SERVER;
        server.state.name  = WAITPING;
    }

    procedure [inline] client_init(e: event_t) 
        modifies system;
        requires m_kind(e.target)  == CLIENT;
        requires m_state(e.target) == INIT;
        requires !m_entry(e.target); 
    {
        var tmp : machine_t;
        tmp = m_get(e.target); 

        if (e.signal == SUCCESS) {
            tmp.state.entry = true;
            tmp.state.name  = SENDPING;
        } else {
            tmp.state.name = BAD;
        }

        system.machines = system.machines[e.target -> tmp];
    }

    procedure [inline] client_send_ping(e: event_t) 
        modifies system;
        requires m_kind(e.target)  == CLIENT;
        requires m_state(e.target) == SENDPING;
        requires !m_entry(e.target); 
    {
        var tmp : machine_t;
        tmp = m_get(e.target);

        if (e.signal == SUCCESS) {
            tmp.state.entry = true;
            tmp.state.name  = WAITPONG;
        } else {
            tmp.state.name = BAD;
        }

        system.machines = system.machines[e.target -> tmp];
    }

    procedure [inline] client_wait_pong(e: event_t) 
        modifies system;
        requires m_kind(e.target)  == CLIENT;
        requires m_state(e.target) == WAITPONG;
    {
        var tmp : machine_t;
        tmp = m_get(e.target);

        if (e.signal == PONG) {
            tmp.state.entry = true;
            tmp.state.name  = SENDPING;
        } else {
            tmp.state.name = BAD;
        }

        system.machines = system.machines[e.target -> tmp];
    }

    procedure [inline] server_send_pong(e: event_t) 
        modifies system;
        requires m_kind(e.target)  == SERVER;
        requires m_state(e.target) == SENDPONG;
        requires !m_entry(e.target); 
    {
        var tmp : machine_t;
        tmp = m_get(e.target);

        if (e.signal == SUCCESS) {
            tmp.state.entry = true;
            tmp.state.name  = WAITPING;
        } else {
            tmp.state.name = BAD;
        }

        system.machines = system.machines[e.target -> tmp];
    }

    procedure [inline] server_wait_ping(e: event_t) 
        modifies system;
        requires m_kind(e.target)  == SERVER;
        requires m_state(e.target) == WAITPING;
    {
        var tmp : machine_t;
        tmp = m_get(e.target);

        if (e.signal == PING) {
            tmp.state.entry = true;
            tmp.state.name  = SENDPONG;
        } else {
            tmp.state.name = BAD;
        }

        system.machines = system.machines[e.target -> tmp];
    }

    procedure [inline] client_init_entry(id: machine_id) 
        modifies system;
        requires m_kind(id)  == CLIENT;
        requires m_state(id) == INIT;
        requires m_entry(id); 
    {
        var e      : event_t;
        var server : machine_t;
        var tmp    : machine_t;

        tmp = m_get(id);
        tmp.state.entry = false;

        e.signal = SUCCESS;
        e.source = id;
        e.target = id;

        call ()       = push_event(e);
        call (server) = create_server();
        call ()       = add_machine(server);

        system.machines = system.machines[id -> tmp];
    }

    procedure [inline] client_send_ping_entry(source: machine_id, target: machine_id) 
        modifies system;
        requires m_kind(source)  == CLIENT;
        requires m_state(source) == SENDPING;
        requires m_entry(source); 
    {
        var success : event_t;
        var ping    : event_t;
        var tmp     : machine_t;

        tmp             = m_get(source);
        tmp.state.entry = false;

        success.signal = SUCCESS;
        success.source = source;
        success.target = source;
        call () = push_event(success);

        ping.signal = PING;
        ping.source = source;
        ping.target = target;
        call () = push_event(ping);

        system.machines = system.machines[source -> tmp];
    }

    procedure [inline] server_send_pong_entry(source: machine_id, target: machine_id) 
        modifies system;
        requires m_kind(source)  == SERVER;
        requires m_state(source) == SENDPONG;
        requires m_entry(source); 
    {
        var success : event_t;
        var pong    : event_t;
        var tmp     : machine_t;

        tmp             = m_get(source);
        tmp.state.entry = false;

        success.signal = SUCCESS;
        success.source = source;
        success.target = source;
        call () = push_event(success);

        pong.signal = PONG;
        pong.source = source;
        pong.target = target;
        call () = push_event(pong);

        system.machines = system.machines[source -> tmp];
    }

    procedure [inline] act() 
        modifies system;
    {
        var s: machine_id;
        assume(m_alive(s));

        case 
            (m_kind(s) == CLIENT): {
                case
                (m_state(s) == INIT): {
                       if (m_entry(s)) {
                            call () = client_init_entry(s);
                        }
                    }
                (m_state(s) == SENDPING): {
                       if (m_entry(s)) {
                            var t: machine_id;
                            assume(m_alive(t) && t != s);
                            call () = client_send_ping_entry(s, t);
                        }
                    }
                (true) : {
                    // do nothings
                }
                esac
            }
            (m_kind(s) == SERVER): {
                case
                (m_state(s) == SENDPONG): {
                       if (m_entry(s)) {
                            var t: machine_id;
                            assume(m_alive(t) && t != s);
                            call () = server_send_pong_entry(s, t);
                        }
                    }
                (true) : {
                    // do nothings
                }
                esac
            }
        (true) : {
            // do nothings
        }
        esac
    }

    procedure [inline] react() 
        modifies system;
    {
        var e  : event_t;

        call (e) = pop_event();

        // case switch on every state of the entire system
        case 
        (m_kind(e.target) == CLIENT) : {
            case 
            (m_state(e.target) == INIT) : {
                if (!m_entry(e.target)) {
                    call () = client_init(e);
                }
            }
            (m_state(e.target) == WAITPONG) : {
                call () = client_wait_pong(e);
            }
            (m_state(e.target) == SENDPING) : {
                if (!m_entry(e.target)) {
                    call () = client_send_ping(e);
                }
            }
            (true) : {
                // do nothing
            }
            esac
        } 
        (m_kind(e.target) == SERVER) : {
            case 
            (m_state(e.target) == WAITPING) : {
                call () = server_wait_ping(e);
            }
            (m_state(e.target) == SENDPONG) : {
                if (!m_entry(e.target)) {
                    call () = server_send_pong(e);
                }
            }
            (true) : {
                // do nothing
            }
            esac
        }
        (true) : {
            // do nothing
        }
        esac
    }

    var system: system_t;

    init {
        call () = init_machines();
    }

    next {
        if (*) {
            call () = act();
        } else {
            assume(e_count() > 0);
            call () = react();
        }
    }

    // MAIN INVARIANT
    invariant never_bad: forall (id: machine_id) :: 
        m_alive(id) ==> m_state(id) != BAD;

    // AUXILLARY INVARIANTS
    // first machine is client, second is server, if it exists
    invariant two_machines_not_in_init_entry_or_one_client_in_init_entry:
        (m_count() == 1 && 
         m_state(0) == INIT && m_entry(0) &&
         m_kind(0) == CLIENT && m_alive(0)) ||
        (m_count() == 2 && 
         (m_state(0) != INIT || !m_entry(0)) &&
         m_kind(0) == CLIENT && m_alive(0) &&
         m_kind(1) == SERVER && m_alive(1));
    
    invariant coherent_events: e_count() == e_tail() - e_head();

    // client is in INIT, SENDPING, or WAITPONG
    invariant client_states: 
        m_state(0) == INIT ||
        m_state(0) == SENDPING ||
        m_state(0) == WAITPONG;

    // server is in SENDPONG, or WAITPING, if it exists
    invariant server_states: 
        m_alive(1) ==> 
            m_state(1) == SENDPONG || 
            m_state(1) == WAITPING;

    invariant cant_both_send: 
        m_state(0) != SENDPING || 
        m_state(1) != SENDPONG;

    // if the client is in init, then the server is in WAITPING, if it exists
    invariant client_init_means_server_waitping: 
        m_state(0) == INIT ==>
            m_alive(1) ==> m_state(1) == WAITPING;

    // if the client is in init entry, then the server doesn't exist and events are empty
    invariant client_init_entry_no_server: 
        m_state(0) == INIT && m_entry(0) ==>
            m_count() == 1 && e_count() == 0;

    // if the client is in init but not entry, then the server exists and success is the only event
    invariant client_init_success: 
        m_state(0) == INIT && !m_entry(0) ==>
            m_count() == 2 && e_count() == 1 &&
            e_signal(e_head()) == SUCCESS &&
            e_target(e_head()) == 0;

    // if the client is in SENDPING entry then there are no events 
    invariant client_send_ping_entry_no_events: 
        m_state(0) == SENDPING && m_entry(0) ==> e_count() == 0;

    // if the client is in SENDPING not entry and the server is in WAITPING, then there are two events: success and ping 
    invariant client_send_ping_not_entry: 
        (m_state(0) == SENDPING && !m_entry(0) && m_state(1) == WAITPING) ==>
            (e_count() == 2 && 
            e_signal(e_head()) == SUCCESS &&
            e_target(e_head()) == 0 &&
            e_signal(e_head() + 1) == PING &&
            e_target(e_head() + 1) == 1);

    // if the client is waiting for a pong, then there is a single pong event or a success before it
    invariant client_wait_pong_events: 
        m_state(1) == WAITPONG ==>
            (e_count() == 2 ==>
            (e_signal(e_head()) == SUCCESS &&
            e_target(e_head()) == 1 &&
            e_signal(e_head() + 1) == PONG &&
            e_target(e_head() + 1) == 0));

    // if the server is in SENDPONG entry then there are no events 
    invariant server_send_pong_entry_no_events: 
        m_state(1) == SENDPONG && m_entry(1) ==> 
            e_count() == 0;

    // if the server is in SENDPONG not entry and the client is in WAITPONG, then there are two events: success and ping 
    invariant server_send_pong_not_entry:
        m_state(1) == SENDPONG && !m_entry(1) && m_state(0) == WAITPONG ==>
            (e_count() == 2 && 
            e_signal(e_head()) == SUCCESS &&
            e_target(e_head()) == 1 &&
            e_signal(e_head() + 1) == PONG &&
            e_target(e_head() + 1) == 0);

    // if the server is waiting for a ping, then there is a single ping event or a success before it
    invariant server_wait_ping_events: 
        m_state(1) == WAITPING ==>
            e_count() == 2 ==>
                e_signal(e_head()) == SUCCESS &&
                e_target(e_head()) == 0 &&
                e_signal(e_head() + 1) == PING &&
                e_target(e_head() + 1) == 1;

    // if both machines are waitng, then there is only one event, and it is going to the right place
    invariant wait_wait_correct: 
        m_state(0) == WAITPONG && m_state(1) == WAITPING ==>
            (e_count() == 1 &&
            ((e_signal(e_head()) == PING &&
            e_target(e_head()) == 1) ||
            ((e_signal(e_head()) == PONG &&
            e_target(e_head()) == 0))));


    // OTHER INTERESTING PROPERTIES
    // every target exists 
    invariant existing_target: forall (x : event_id) :: 
        e_valid(x) ==> m_alive(e_target(x));

    control {
        v = induction;
        check;
        print_results;

        v.print_cex(
            system.m_count,

            system.e_size,
            system.events[system.e_head].signal,
            system.events[system.e_head].target,
            system.events[system.e_head+1].signal,
            system.events[system.e_head+1].target,

            system.machines[0].kind,
            system.machines[0].state.name,
            system.machines[0].state.entry,

            system.machines[1].kind,
            system.machines[1].state.name,
            system.machines[1].state.entry
        );
    }
}